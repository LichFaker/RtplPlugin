/* The following code was generated by JFlex 1.4.3 on 16-6-1 下午5:08 */

 /* It's an automatically generated code. Do not modify it. */
package com.lichfaker.plugin.rtpl.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.*;
import com.intellij.psi.xml.*;
import java.util.ArrayList;
import java.util.LinkedList;
import com.lichfaker.plugin.rtpl.parsing.RtplTokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 16-6-1 下午5:08 from the specification file
 * <tt>/Volumes/LichFaker/Projects/Android/Github/RtplPlugin/src/com/lichfaker/plugin/rtpl/lexer/rtpl.flex</tt>
 */
public class RtplLexer implements FlexLexer, RtplTokenType {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ATTR_VALUE_JS = 22;
  public static final int ATTR_LIST = 8;
  public static final int END_TAG = 4;
  public static final int ATTR_VALUE_DQ = 18;
  public static final int STATE_DECALER_JS = 16;
  public static final int C_COMMENT_END = 28;
  public static final int GLOBAL_VARIABLE = 24;
  public static final int STATE_DECALER_DQ = 14;
  public static final int ATTR = 10;
  public static final int TAG = 2;
  public static final int YYINITIAL = 0;
  public static final int STATE_ATTR = 12;
  public static final int COMMENT = 6;
  public static final int C_COMMENT_START = 26;
  public static final int ATTR_VALUE_SQ = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\45\1\0\1\3\1\45\22\0\1\3\1\12\1\40"+
    "\1\32\1\43\1\0\1\13\1\37\1\11\1\11\3\0\1\7\1\5"+
    "\1\35\12\2\1\6\1\20\1\14\1\36\1\10\2\0\6\34\24\1"+
    "\1\0\1\44\1\15\1\0\1\4\1\0\1\21\1\30\3\34\1\46"+
    "\1\16\4\1\1\16\1\31\1\27\1\23\1\22\1\25\1\47\1\24"+
    "\1\17\1\26\2\1\1\33\2\1\1\41\1\11\1\42\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\16\0\1\1\1\2\1\3\1\4\2\1\1\3"+
    "\1\5\1\6\1\7\2\3\1\10\1\11\1\12\1\13"+
    "\3\14\1\15\1\16\1\17\1\20\1\21\1\22\5\23"+
    "\1\24\1\23\6\25\1\26\1\27\1\25\3\30\1\12"+
    "\1\31\1\32\1\33\1\34\2\33\1\35\1\36\1\37"+
    "\1\11\4\37\1\40\7\0\1\41\1\5\1\42\1\10"+
    "\1\0\1\13\1\43\4\0\1\31\1\34\1\44\1\0"+
    "\1\45\10\0\1\46\1\0\1\47\2\0\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0258"+
    "\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u02f8\0\u0348\0\u0370"+
    "\0\u02f8\0\u0398\0\u03c0\0\u03e8\0\u02f8\0\u0410\0\u0438\0\u02f8"+
    "\0\u02a8\0\u0398\0\u02f8\0\u02f8\0\u02f8\0\u02f8\0\u02f8\0\u02f8"+
    "\0\u02f8\0\u02a8\0\u0398\0\u0460\0\u0488\0\u02f8\0\u04b0\0\u02f8"+
    "\0\u02a8\0\u0398\0\u0460\0\u0488\0\u04d8\0\u02f8\0\u02f8\0\u04b0"+
    "\0\u02f8\0\u02a8\0\u0398\0\u02f8\0\u0500\0\u02f8\0\u02f8\0\u0528"+
    "\0\u02a8\0\u0398\0\u02f8\0\u02f8\0\u02f8\0\u0550\0\u0578\0\u02a8"+
    "\0\u0398\0\u05a0\0\u02f8\0\u05c8\0\u05f0\0\u0618\0\u0640\0\u0668"+
    "\0\u0690\0\u06b8\0\u02f8\0\u06e0\0\u02f8\0\u0708\0\u0730\0\u0758"+
    "\0\u02f8\0\u0488\0\u0780\0\u07a8\0\u04d8\0\u07d0\0\u07f8\0\u02f8"+
    "\0\u0820\0\u02f8\0\u0848\0\u0870\0\u0898\0\u08c0\0\u08e8\0\u0910"+
    "\0\u0938\0\u0960\0\u02f8\0\u0988\0\u02f8\0\u09b0\0\u09d8\0\u02f8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\20\1\21\7\20\1\22\1\23\15\20\1\24\10\20"+
    "\1\24\1\25\1\21\2\20\1\26\1\27\1\26\1\30"+
    "\1\27\3\26\1\31\2\26\1\22\1\32\1\26\2\27"+
    "\1\26\11\27\1\26\2\27\1\33\7\26\1\30\2\27"+
    "\1\26\1\34\1\26\1\30\1\34\3\26\1\31\2\26"+
    "\1\22\1\32\1\26\2\34\1\26\11\34\1\26\2\34"+
    "\10\26\1\30\2\34\7\35\1\36\40\35\1\26\1\37"+
    "\1\26\1\30\1\37\6\26\1\22\1\32\1\26\2\37"+
    "\1\26\11\37\1\26\2\37\10\26\1\30\2\37\3\40"+
    "\1\30\7\40\1\41\1\42\21\40\1\43\1\44\1\45"+
    "\1\46\3\40\1\30\5\40\1\26\7\40\1\41\1\42"+
    "\21\40\1\43\1\44\1\47\1\50\3\40\1\26\2\40"+
    "\13\51\1\52\1\53\4\51\1\54\15\51\1\55\1\56"+
    "\5\51\1\57\1\51\13\60\1\61\1\62\4\60\1\63"+
    "\15\60\1\64\1\65\1\66\1\67\3\60\1\70\1\60"+
    "\13\71\1\72\1\73\23\71\1\56\1\46\21\71\1\72"+
    "\1\73\22\71\1\56\1\74\7\71\1\51\1\75\2\51"+
    "\1\75\6\51\1\52\1\53\1\51\2\75\1\51\11\75"+
    "\1\51\2\75\4\51\1\46\1\67\1\76\2\51\2\75"+
    "\1\77\1\100\2\77\1\100\6\77\1\101\1\102\1\77"+
    "\2\100\1\77\11\100\1\77\2\100\4\77\1\103\1\104"+
    "\3\77\2\100\1\105\1\106\5\105\1\107\3\105\1\110"+
    "\1\111\1\112\2\106\1\105\11\106\1\105\2\106\11\105"+
    "\2\106\1\105\1\106\5\105\1\107\3\105\1\110\1\111"+
    "\1\113\2\106\1\105\11\106\1\105\2\106\11\105\2\106"+
    "\3\20\1\0\7\20\2\0\15\20\1\0\10\20\1\0"+
    "\1\25\1\0\2\20\3\0\1\21\41\0\1\21\3\0"+
    "\1\114\2\0\1\114\11\0\1\115\1\114\1\0\1\116"+
    "\3\114\1\117\1\114\1\120\2\114\1\121\2\114\11\0"+
    "\2\114\12\0\1\122\22\0\1\123\62\0\3\20\1\0"+
    "\7\20\2\0\27\20\1\25\1\0\2\20\1\0\2\27"+
    "\1\0\2\27\1\124\7\0\2\27\1\0\11\27\1\0"+
    "\2\27\11\0\2\27\3\0\1\30\41\0\1\30\14\0"+
    "\1\122\45\0\1\125\40\0\2\34\1\0\2\34\1\126"+
    "\7\0\2\34\1\0\11\34\1\0\2\34\11\0\2\34"+
    "\7\35\1\127\40\35\1\0\2\37\1\0\2\37\1\130"+
    "\7\0\2\37\1\0\11\37\1\0\2\37\11\0\2\37"+
    "\24\0\1\131\23\0\37\132\1\51\4\132\1\133\1\0"+
    "\2\132\47\0\1\134\40\135\1\51\3\135\1\0\3\135"+
    "\1\0\2\75\1\0\2\75\1\136\7\0\2\75\1\0"+
    "\11\75\1\0\2\75\11\0\2\75\1\0\2\100\1\0"+
    "\2\100\1\137\7\0\2\100\1\0\11\100\1\0\2\100"+
    "\11\0\2\100\1\0\3\106\1\0\1\106\3\0\3\106"+
    "\2\0\2\106\1\0\11\106\1\0\2\106\10\0\3\106"+
    "\7\0\1\127\50\0\1\140\40\0\2\114\1\0\2\114"+
    "\1\141\7\0\2\114\1\142\11\114\1\0\2\114\11\0"+
    "\2\114\1\0\2\114\1\0\2\114\1\141\7\0\1\114"+
    "\1\143\1\142\11\114\1\0\2\114\11\0\2\114\1\0"+
    "\2\114\1\0\2\114\1\141\7\0\2\114\1\142\1\114"+
    "\1\144\6\114\1\145\1\0\2\114\11\0\2\114\1\0"+
    "\2\114\1\0\2\114\1\141\7\0\2\114\1\142\5\114"+
    "\1\146\3\114\1\0\2\114\11\0\2\114\1\0\2\114"+
    "\1\0\2\114\1\141\7\0\2\114\1\142\7\114\1\147"+
    "\1\114\1\0\2\114\11\0\2\114\2\0\1\150\30\0"+
    "\1\151\23\0\1\152\41\0\2\124\1\0\2\124\10\0"+
    "\2\124\1\0\11\124\1\0\2\124\11\0\2\124\1\0"+
    "\2\126\1\0\2\126\10\0\2\126\1\0\11\126\1\0"+
    "\2\126\11\0\2\126\10\0\1\153\40\0\2\130\1\0"+
    "\2\130\10\0\2\130\1\0\11\130\1\0\2\130\11\0"+
    "\2\130\45\132\1\0\2\132\23\0\1\154\25\0\2\136"+
    "\1\0\2\136\10\0\2\136\1\0\11\136\1\0\2\136"+
    "\11\0\2\136\1\0\2\137\1\0\2\137\10\0\2\137"+
    "\1\0\11\137\1\0\2\137\11\0\2\137\1\0\2\141"+
    "\1\0\2\141\10\0\2\141\1\142\11\141\1\0\2\141"+
    "\11\0\2\141\1\0\2\114\1\0\2\114\1\141\7\0"+
    "\2\114\1\155\11\114\1\0\2\114\11\0\2\114\1\0"+
    "\2\114\1\0\2\114\1\141\7\0\2\114\1\142\2\114"+
    "\1\156\6\114\1\0\2\114\11\0\2\114\1\0\2\114"+
    "\1\0\2\114\1\141\7\0\2\114\1\142\1\114\1\143"+
    "\7\114\1\0\2\114\11\0\2\114\1\0\2\114\1\0"+
    "\2\114\1\141\7\0\2\114\1\142\2\114\1\115\6\114"+
    "\1\0\2\114\11\0\2\114\1\0\2\114\1\0\2\114"+
    "\1\141\7\0\2\114\1\142\3\114\1\145\5\114\1\0"+
    "\2\114\11\0\2\114\2\0\1\150\15\0\1\155\31\0"+
    "\1\157\16\0\1\157\6\0\1\157\3\0\1\157\11\0"+
    "\1\157\10\0\1\160\71\0\1\131\17\0\2\114\1\0"+
    "\2\114\1\141\7\0\2\114\1\142\3\114\1\143\5\114"+
    "\1\0\2\114\11\0\2\114\2\0\1\157\15\0\1\155"+
    "\1\157\6\0\1\157\3\0\1\157\11\0\1\157\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2560];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\16\0\4\1\1\11\1\1\1\11\2\1\1\11"+
    "\3\1\1\11\2\1\1\11\2\1\7\11\4\1\1\11"+
    "\1\1\1\11\5\1\2\11\1\1\1\11\2\1\1\11"+
    "\1\1\2\11\3\1\3\11\5\1\1\11\7\0\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\1\11\4\0\2\1"+
    "\1\11\1\0\1\11\10\0\1\11\1\0\1\11\2\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
      private int yyline;
      private int yycolumn;

      private IElementType elTokenType = XML_DATA_CHARACTERS;
      private IElementType elTokenType2 = XML_ATTRIBUTE_VALUE_TOKEN;
      private IElementType javaEmbeddedTokenType = XML_ATTRIBUTE_VALUE_TOKEN;
      private boolean myConditionalCommentsSupport;

      public void setConditionalCommentsSupport(final boolean b) {
        myConditionalCommentsSupport = b;
      }

      public void setElTypes(IElementType _elTokenType,IElementType _elTokenType2) {
        elTokenType = _elTokenType;
        elTokenType2 = _elTokenType2;
      }

      public void setJavaEmbeddedType(IElementType _tokenType) {
        javaEmbeddedTokenType = _tokenType;
      }

      private int myPrevState = YYINITIAL;

      public int yyprevstate() {
        return myPrevState;
      }

      private int popState(){
        final int prev = myPrevState;
        myPrevState = YYINITIAL;
        return prev;
      }

      protected void pushState(int state){
        myPrevState = state;
      }

      // This adds support for nested states. I'm no JFlex pro, so maybe this is overkill, but it works quite well.
      private final LinkedList<Integer> states = new LinkedList<Integer>();

      private void yypushstate(int state) {
          states.addFirst(yystate());
          yybegin(state);
      }
      private void yypopstate() {
          final int state = states.removeFirst();
          yybegin(state);
      }

      private static final ArrayList<String> jsKeywords = new ArrayList<>();
      private static final ArrayList<String> jsFields = new ArrayList<>();

      static {
          jsKeywords.add("break");
          jsKeywords.add("case");
          jsKeywords.add("class");
          jsKeywords.add("catch");
          jsKeywords.add("const");
          jsKeywords.add("continue");
          jsKeywords.add("debugger");
          jsKeywords.add("default");
          jsKeywords.add("delete");
          jsKeywords.add("do");
          jsKeywords.add("else");
          jsKeywords.add("export");
          jsKeywords.add("extends");
          jsKeywords.add("finally");
          jsKeywords.add("for");
          jsKeywords.add("function");
          jsKeywords.add("import");
          jsKeywords.add("in");
          jsKeywords.add("instanceof");
          jsKeywords.add("let");
          jsKeywords.add("return");
          jsKeywords.add("super");
          jsKeywords.add("switch");
          jsKeywords.add("throw");
          jsKeywords.add("try");
          jsKeywords.add("typeof");
          jsKeywords.add("var");
          jsKeywords.add("while");
          jsKeywords.add("with");
          jsKeywords.add("yield");
          jsKeywords.add("enum");
          jsKeywords.add("await");
          jsKeywords.add("implements");
          jsKeywords.add("package");
          jsKeywords.add("protected");
          jsKeywords.add("private");
          jsKeywords.add("public");
          jsKeywords.add("static");
          jsKeywords.add("interface");
          jsKeywords.add("new");
          // 全局变量
          jsFields.add("Math");
          jsFields.add("Date");
          jsFields.add("this");
          jsFields.add("true");
          jsFields.add("false");
          jsFields.add("null");
          jsFields.add("undefined");
          jsFields.add("Infinity");
          jsFields.add("NaN");
          jsFields.add("JSON");
          jsFields.add("Object");
          jsFields.add("isNaN");
          jsFields.add("isFinite");
          jsFields.add("decodeURI");
          jsFields.add("decodeURIComponent");
          jsFields.add("encodeURI");
          jsFields.add("Array");
          jsFields.add("Number");
          jsFields.add("String");
          jsFields.add("encodeURIComponent");
          jsFields.add("parseInt");
          jsFields.add("parseFloat");
          jsFields.add("console");
      }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RtplLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 118) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL] : zzBufferL.charAt(zzCurrentPosL))) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 34: 
          { yybegin(YYINITIAL); return XML_EMPTY_ELEMENT_END;
          }
        case 41: break;
        case 35: 
          { return JS_KEYWORDS;
          }
        case 42: break;
        case 22: 
          { yypushstate(STATE_DECALER_JS); return XML_ATTRIBUTE_VALUE_JS_START;
          }
        case 43: break;
        case 7: 
          { yybegin(YYINITIAL); return XML_TAG_END;
          }
        case 44: break;
        case 26: 
          { yypushstate(GLOBAL_VARIABLE); return JS_GLOBAL_VARIABLE;
          }
        case 45: break;
        case 33: 
          { yybegin(END_TAG); return XML_END_TAG_START;
          }
        case 46: break;
        case 5: 
          { yybegin(ATTR_LIST); pushState(TAG);
return XML_TAG_NAME;
          }
        case 47: break;
        case 8: 
          { return XML_TAG_NAME;
          }
        case 48: break;
        case 28: 
          { return JS_GLOBAL_VARIABLE;
          }
        case 49: break;
        case 10: 
          { return XML_BAD_CHARACTER;
          }
        case 50: break;
        case 37: 
          { return XML_ENTITY_REF_TOKEN;
          }
        case 51: break;
        case 11: 
          { if ("declare".equals(yytext().toString())) {
    yybegin(STATE_ATTR);
}
else {yybegin(ATTR); }
return XML_NAME;
          }
        case 52: break;
        case 27: 
          { yypopstate(); return XML_ATTRIBUTE_VALUE_JS_CONTENT;
          }
        case 53: break;
        case 14: 
          { yybegin(ATTR_VALUE_SQ); return XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 54: break;
        case 23: 
          { yypopstate(); return XML_ATTRIBUTE_VALUE_JS_END;
          }
        case 55: break;
        case 9: 
          { return XML_COMMENT_CHARACTERS;
          }
        case 56: break;
        case 20: 
          { yybegin(ATTR_LIST); return XML_ATTRIBUTE_VALUE_END_DELIMITER;
          }
        case 57: break;
        case 32: 
          { yybegin(COMMENT); return XML_CONDITIONAL_COMMENT_END;
          }
        case 58: break;
        case 31: 
          { yybegin(COMMENT); return XML_COMMENT_CHARACTERS;
          }
        case 59: break;
        case 25: 
          { String name = yytext().toString();
if (jsKeywords.contains(name)) {return JS_KEYWORDS;}
else if (jsFields.contains(name)) { return JS_GLOBAL_VARIABLE;}
else { return XML_ATTRIBUTE_VALUE_JS_CONTENT;}
          }
        case 60: break;
        case 21: 
          { return XML_ATTRIBUTE_VALUE_JS_END;
          }
        case 61: break;
        case 29: 
          { yypopstate();yypushstate(ATTR_VALUE_JS); return XML_ATTRIBUTE_VALUE_JS_START;
          }
        case 62: break;
        case 18: 
          { yybegin(STATE_DECALER_JS); return XML_ATTRIBUTE_VALUE_JS_START;
          }
        case 63: break;
        case 1: 
          { return XML_DATA_CHARACTERS;
          }
        case 64: break;
        case 24: 
          { return XML_ATTRIBUTE_VALUE_TOKEN;
          }
        case 65: break;
        case 17: 
          { yybegin(STATE_DECALER_DQ); return XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 66: break;
        case 16: 
          { yypushstate(ATTR_VALUE_JS); return XML_ATTRIBUTE_VALUE_JS_START;
          }
        case 67: break;
        case 12: 
          { yybegin(ATTR_LIST); yypushback(yylength());
          }
        case 68: break;
        case 13: 
          { return XML_EQ;
          }
        case 69: break;
        case 40: 
          { yybegin(COMMENT); return XML_COMMENT_START;
          }
        case 70: break;
        case 19: 
          { return XML_ATTRIBUTE_VALUE_JS_CONTENT;
          }
        case 71: break;
        case 15: 
          { yybegin(ATTR_VALUE_DQ); return XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 72: break;
        case 6: 
          { return XML_WHITE_SPACE;
          }
        case 73: break;
        case 36: 
          { yybegin(COMMENT); return XML_CONDITIONAL_COMMENT_START_END;
          }
        case 74: break;
        case 38: 
          { yybegin(YYINITIAL); return XML_COMMENT_END;
          }
        case 75: break;
        case 2: 
          { return XML_REAL_WHITE_SPACE;
          }
        case 76: break;
        case 4: 
          { yybegin(TAG); return XML_START_TAG_START;
          }
        case 77: break;
        case 30: 
          { yypopstate(); yypopstate();return XML_ATTRIBUTE_VALUE_JS_END;
          }
        case 78: break;
        case 39: 
          { return XML_CHAR_ENTITY_REF;
          }
        case 79: break;
        case 3: 
          { if(yystate() == YYINITIAL){
        return XML_BAD_CHARACTER;
      }
      else yybegin(popState()); yypushback(yylength());
          }
        case 80: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                yyline = 0; yycolumn = 0; return null;
              }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
